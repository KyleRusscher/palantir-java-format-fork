apply plugin: 'java-library'
apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.revapi'
apply plugin: 'maven-publish'
apply plugin: 'signing'

dependencies {
    api 'com.google.guava:guava'
    api 'com.fasterxml.jackson.core:jackson-annotations'
    api 'com.fasterxml.jackson.datatype:jackson-datatype-guava'

    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
}

tasks.withType(JavaCompile).named('compileJava') {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

javaVersion {
    target = 21
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // artifactId remains the project name: palantir-java-format-spi
            pom {
                name = 'Palantir Java Format Fork - SPI'
                description = 'SPI module for palantir-java-format fork, published under io.github.KyleRusscher'
                url = 'https://github.com/KyleRusscher/palantir-java-format-fork'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'kylerusscher'
                        name = 'Kyle Russcher'
                        url = 'https://github.com/KyleRusscher'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/KyleRusscher/palantir-java-format-fork.git'
                    developerConnection = 'scm:git:ssh://git@github.com:KyleRusscher/palantir-java-format-fork.git'
                    url = 'https://github.com/KyleRusscher/palantir-java-format-fork'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            def releasesRepoUrl = uri('https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/')
            def snapshotsRepoUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = findProperty('ossrhUsername') ?: System.getenv('OSSRH_USERNAME')
                password = findProperty('ossrhPassword') ?: System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

signing {
    def signingKey = findProperty('signing.key') ?: System.getenv('SIGNING_KEY')
    def signingPassphrase = findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE')
    if (signingKey && signingPassphrase) {
        useInMemoryPgpKeys(signingKey, signingPassphrase)
    }
    required { gradle.taskGraph.hasTask(':palantir-java-format-spi:publish') || gradle.taskGraph.hasTask('publish') }
    sign publishing.publications.mavenJava
}
