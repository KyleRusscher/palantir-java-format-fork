apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.gradle-plugin-testing'
apply plugin: 'com.palantir.external-publish-gradle-plugin'
apply plugin: 'com.palantir.revapi'

configurations {
    pluginClasspath {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    compileOnly 'com.diffplug.spotless:spotless-plugin-gradle'

    implementation gradleApi()
    implementation 'com.google.guava:guava'
    implementation project(':palantir-java-format-spi')
    implementation project(':palantir-java-format-jdk-bootstrap')
    implementation 'com.palantir.gradle.utils:platform'
    implementation 'com.palantir.gradle.idea-configuration:gradle-idea-configuration'

    testImplementation project(':palantir-java-format')
    testImplementation 'com.netflix.nebula:nebula-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'

    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'

    pluginClasspath 'com.diffplug.spotless:spotless-plugin-gradle'
}

gradlePlugin {
    website = 'https://github.com/palantir/palantir-java-format/'
    vcsUrl = 'https://github.com/palantir/palantir-java-format/'
    plugins {
        palantirJavaFormat {
            id = 'com.palantir.java-format'
            implementationClass = 'com.palantir.javaformat.gradle.PalantirJavaFormatPlugin'
            description = 'A modern, lambda-friendly, 120 character Java formatter. Applies all other palantir-java-format plugins.'
            displayName = 'Palantir Java Format'
            tags.set(['java', 'style'])
        }
        palantirJavaFormatIdea {
            id = 'com.palantir.java-format-idea'
            implementationClass = 'com.palantir.javaformat.gradle.PalantirJavaFormatIdeaPlugin'
            description = 'Plugin to configure the PalantirJavaFormat IDEA plugin based on an optional implementation version of the formatter.'
            displayName = 'Palantir Java Format Idea'
            tags.set(['java', 'style'])
        }
        palantirJavaFormatSpotless {
            id = 'com.palantir.java-format-spotless'
            implementationClass = 'com.palantir.javaformat.gradle.PalantirJavaFormatSpotlessPlugin'
            description = 'If spotless is applied, configures a java step that formats using palantir-java-format.'
            displayName = 'Palantir Java Format Spotless'
            tags.set(['java', 'style'])
        }
        palantirJavaFormatProvider {
            id = 'com.palantir.java-format-provider'
            implementationClass = 'com.palantir.javaformat.gradle.PalantirJavaFormatProviderPlugin'
            description = 'Exposes a configuration containing the palantir-java-format jars'
            displayName = 'Palantir Java Format Provider'
            tags.set(['java', 'style'])
        }
    }
}

tasks.withType(PluginUnderTestMetadata).configureEach {
    pluginClasspath.from += configurations.pluginClasspath
}

configurations {
    impl {
        canBeConsumed = false
        canBeResolved = true
    }

    formatterNativeImage {
        canBeConsumed = false
        canBeResolved = true
    }


}

dependencies {
    impl project(':palantir-java-format')
    formatterNativeImage(project(':palantir-java-format-native')) {
        attributes {
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, project.objects.named(LibraryElements, 'nativeImage'))
        }
    }
}

tasks.register("copyNativeImage", Copy.class) {
    from(configurations.formatterNativeImage)
    rename { fileName ->
        String.format("%s.bin", fileName)
    }
    into("$buildDir/nativeImage")
}

def writeImplClasspath = tasks.register("writeImplClasspath") {
    inputs.files(tasks.named("copyNativeImage"))
    doLast {
        file("$buildDir/impl.classpath").text = configurations.impl.asPath
        file("$buildDir/nativeImage.path").text = tasks.named("copyNativeImage").get().getOutputs().getFiles().getSingleFile().listFiles()[0].getAbsolutePath()
    }
}

tasks.named("test").configure {
    dependsOn(writeImplClasspath)
}

gradleTestUtils {
    gradleVersions = ['8.14.3']
}
